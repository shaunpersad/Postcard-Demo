{
  "name": "fileapi",
  "version": "2.0.2",
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-version": "*",
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-contrib-concat": "*",
    "grunt-contrib-uglify": "*",
    "grunt-contrib-watch": "*",
    "eventemitter2": "~0.4.9",
    "semver": "~1.0.14",
    "temporary": "~0.0.4",
    "phantomjs": "latest"
  },
  "description": "FileAPI — a set of  javascript tools for working with files. Multiupload, drag'n'drop and chunked file upload. Images: crop, resize and auto orientation by EXIF.",
  "main": "dist/FileAPI.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mailru/FileAPI.git"
  },
  "keywords": [
    "FileAPI",
    "upload",
    "file",
    "html5",
    "chunked"
  ],
  "author": {
    "name": "Konstantin Lebedev",
    "email": "ibnRubaXa@gmail.com"
  },
  "contributors": [
    {
      "name": "Vladimir Demidov",
      "email": "v.demidov@corp.mail.ru"
    },
    {
      "name": "Ilya Lebedev",
      "email": "ilya@lebedev.net"
    }
  ],
  "license": "BSD",
  "readme": "﻿<a name=\"FileAPI\"></a>\n## FileAPI\nA set of javascript tools for working with files.\n\n<a name=\"started\"></a>\n### Get started\n\n```html\n\t<div>\n\t\t<!-- \"js-fileapi-wrapper\" -- required class -->\n\t\t<div class=\"js-fileapi-wrapper upload-btn\" id=\"choose\">\n\t\t\t<div class=\"upload-btn__txt\">Choose files</div>\n\t\t\t<input name=\"files\" type=\"file\" multiple />\n\t\t</div>\n\t\t<div id=\"images\"><!-- previews --></div>\n\t</div>\n\n\t<script>window.FileAPI = { staticPath: '/js/FileAPI/dist/' };</script>\n\t<script src=\"/js/FileAPI/dist/FileAPI.min.js\"></script>\n\t<script>\n\t\tFileAPI.event.on(choose, 'change', function (evt){\n\t\t\tvar files = FileAPI.getFiles(evt); // Retrieve file list\n\n\t\t\tFileAPI.filterFiles(files, function (file, info/**Object*/){\n\t\t\t\tif( /^image/.test(file.type) ){\n\t\t\t\t\treturn\tinfo.width >= 320 && info.height >= 240;\n\t\t\t\t}\n\t\t\t\treturn\tfalse;\n\t\t\t}, function (files/**Array*/, rejected/**Array*/){\n\t\t\t\tif( files.length ){\n\t\t\t\t\t// Make preview 100x100\n\t\t\t\t\tFileAPI.each(files, function (file){\n\t\t\t\t\t\tFileAPI.Image(file).preview(100).get(function (err, img){\n\t\t\t\t\t\t\timages.appendChild(img);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\t// Uploading Files\n\t\t\t\t\tFileAPI.upload({\n\t\t\t\t\t\turl: './ctrl.php',\n\t\t\t\t\t\tfiles: { images: files },\n\t\t\t\t\t\tprogress: function (evt){ /* ... */ },\n\t\t\t\t\t\tcomplete: function (err, xhr){ /* ... */ }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t</script>\n```\n\n---\n\n<a name=\"FileAPI.setup\"></a>\n### Setup options\nEdit the file `crossdomain.xml` and place it to the root of the domain to which files will be uploaded.\n\n```html\n\t<script>\n\t\twindow.FileAPI = {\n\t\t\t  debug: false   // debug mode, see Console\n\t\t\t, cors: false    // if used CORS, set `true`\n\t\t\t, media: false   // if used WebCam, set `true`\n\t\t\t, staticPath: '/js/FileAPI/dist/' // path to '*.swf'\n\t\t\t, postNameConcat: function (name, idx){\n\t\t\t\t// Default: object[foo]=1&object[bar][baz]=2\n\t\t\t\t// .NET: https://github.com/mailru/FileAPI/issues/121#issuecomment-24590395\n\t\t\t\treturn\tname + (idx != null ? '['+ idx +']' : '');\n\t\t\t}\n\t\t};\n\t</script>\n\t<script src=\"/js/FileAPI/dist/FileAPI.min.js\"></script>\n\n\t<!-- OR -->\n\n\t<script>\n\t\twindow.FileAPI = { /* options */ };\n\t\trequire(['FileAPI'], function (FileAPI){\n\t\t\t// ...\n\t\t});\n\t</script>\n```\n\n---\n\n\n<a name=\"FileAPI.getFiles\"></a>\n### getFiles(input`:HTMLInputElement|Event|$.Event`)`:Array`\nRetrieve file list from `input` element or `event` object, also support `jQuery`.\n\n* input — `HTMLInputElement`, `change` and `drop` event, `jQuery` collection or `jQuery.Event`\n\n```js\nvar el = document.getElement('my-input');\nFileAPI.event.on(el, function (evt/**Event*/){\n\t// Retrieve file list\n\tvar files = FileAPI.getFiles(el);\n\n\t// or event\n\tvar files = FileAPI.getFiles(evt);\n});\n```\n\n---\n\n\n<a name=\"FileAPI.getInfo\"></a>\n### getInfo(file`:Object`, callback`:Function`)`:void`\nGet info of file (see also: FileAPI.addInfoReader).\n\n* file — file object (https://developer.mozilla.org/en-US/docs/DOM/File)\n* callback — function, called after collected info of file\n\n```js\n// Get info of image file (FileAPI.exif.js included)\nFileAPI.getInfo(file, function (err/**String*/, info/**Object*/){\n\tif( !err ){\n\t\tconsole.log(info); // { width: 800, height: 600, exif: {..} }\n\t}\n});\n\n// Get info of mp3 file (FileAPI.id3.js included)\nFileAPI.getInfo(file, function (err/**String*/, info/**Object*/){\n\tif( !err ){\n\t\tconsole.log(info); // { title: \"...\", album: \"...\", artists: \"...\", ... }\n\t}\n});\n```\n\n---\n\n<a name=\"FileAPI.filterFiles\"></a>\n### filterFiles(files`:Array`, filter`:Function`, callback`:Function`)`:void`\nFiltering the list of files, with additional information about files.\nSee also: FileAPI.getInfo and FileAPI.addInfoReader.\n\n* files — original list of files\n* filter — function, takes two arguments: `file` — the file itself, `info` — additional information.\n* callback — function: `list` — files that match the condition, `other` — all the rest.\n\n```js\n// Get list of file\nvar files = FileAPI.getFiles(input);\n\n// Filter the List\nFileAPI.filterFiles(files, function (file/**Object*/, info/**Object*/){\n\tif( /^image/.test(file.type) && info ){\n\t\treturn\tinfo.width > 320 && info.height > 240;\n\t} else {\n\t\treturn\tfile.size < 20 * FileAPI.MB;\n\t}\n}, function (list/**Array*/, other/**Array*/){\n\tif( list.length ){\n\t\t// ..\n\t}\n});\n```\n\n---\n\n<a name=\"FileAPI.getDropFiles\"></a>\n### getDropFiles(evt`:Event|$.Event`, callback`:Function`)`:void`\nGet a list of files, including directories.\n\n* evt — `drop` event\n* callback — function, takes one argument, a list of files\n\n```js\nFileAPI.event.on(document, 'drop', function (evt/**Event*/){\n\tevt.preventDefault();\n\n\t// Get a list of files\n\tFileAPI.getDropFiles(evt, function (files/**Array*/){\n\t\t// ...\n\t});\n});\n```\n\n---\n\n<a name=\"FileAPI.upload\"></a>\n### upload(opts`:Object`)`:XmlHttpRequest`\nUploading files to the server (successively). Returns XHR-like object.\nIt is important to remember to correctly worked flash-transport server response body must not be empty,\nfor example, you can pass, just text \"ok\".\n\n* opts — options object, see [Upload options](#options)\n\n```js\nvar el = document.getElementById('my-input');\nFileAPI.event.on(el, 'change', function (evt/**Event*/){\n\tvar files = FileAPI.getFiles(evt);\n\tvar xhr = FileAPI.upload({\n\t\turl: 'http://rubaxa.org/FileAPI/server/ctrl.php',\n\t\tfiles: { file: files[0] },\n\t\tcomplete: function (err, xhr){\n\t\t\tif( !err ){\n\t\t\t\tvar result = xhr.responseText;\n\t\t\t\t// ...\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n---\n\n<a name=\"FileAPI.addInfoReader\"></a>\n### addInfoReader(mime`:RegExp`, handler`:Function`)`:void`\nAdds a handler for the collection of information about a file.\nSee also: FileAPI.getInfo and FileAPI.filterFiles.\n\n* mime — pattern of mime-type\n* handler — takes two arguments: `file` object and `complete` function callback\n\n```js\nFileAPI.addInfoReader(/^image/, function (file/**File*/, callback/**Function*/){\n\t// http://www.nihilogic.dk/labs/exif/exif.js\n\t// http://www.nihilogic.dk/labs/binaryajax/binaryajax.js\n\tFileAPI.readAsBinaryString(file, function (evt/**Object*/){\n\t\tif( evt.type == 'load' ){\n\t\t\tvar binaryString = evt.result;\n\t\t\tvar oFile = new BinaryFile(binaryString, 0, file.size);\n\t\t\tvar exif  = EXIF.readFromBinaryFile(oFile);\n\t\t\tcallback(false, { 'exif': exif || {} });\n\t\t}\n\t\telse if( evt.type == 'error' ){\n\t\t\tcallback('read_as_binary_string');\n\t\t}\n\t\telse if( evt.type == 'progress' ){\n\t\t\t// ...\n\t\t}\n\t});\n});\n```\n\n---\n\n<a name=\"FileAPI.readAsDataURL\"></a>\n### readAsDataURL(file`:Object`, callback`:Function`)`:void`\nReading the contents of the specified `File` as `dataURL`.\n\n* file — file object\n* callback — function, receives a result\n\n```js\nFileAPI.readAsDataURL(file, function (evt/**Object*/){\n\tif( evt.type == 'load' ){\n\t\t// Success\n\t \tvar dataURL = evt.result;\n\t} else if( evt.type =='progress' ){\n\t\tvar pr = evt.loaded/evt.total * 100;\n\t} else {\n\t\t// Error\n\t}\n})\n```\n\n---\n\n<a name=\"FileAPI.readAsBinaryString\"></a>\n### readAsBinaryString(file`:Object`, callback`:Function`)`:void`\nReading the contents of the specified `File` as `BinaryString`.\n\n* file — file object\n* callback — function, receives a result\n\n```js\nFileAPI.readAsBinaryString(file, function (evt/**Object*/){\n\tif( evt.type == 'load' ){\n\t\t// Success\n\t \tvar binaryString = evt.result;\n\t} else if( evt.type =='progress' ){\n\t\tvar pr = evt.loaded/evt.total * 100;\n\t} else {\n\t\t// Error\n\t}\n})\n```\n\n---\n\n<a name=\"FileAPI.readAsArrayBuffer\"></a>\n### readAsBinaryString(file`:Object`, callback`:Function`)`:void`\nReading the contents of the specified `File` as `ArrayBuffer`.\n\n* file — file object\n* callback — function, receives a result\n\n```js\nFileAPI.readAsArrayBuffer(file, function (evt/**Object*/){\n\tif( evt.type == 'load' ){\n\t\t// Success\n\t \tvar arrayBuffer = evt.result;\n\t} else if( evt.type =='progress' ){\n\t\tvar pr = evt.loaded/evt.total * 100;\n\t} else {\n\t\t// Error\n\t}\n})\n```\n\n---\n\n<a name=\"FileAPI.readAsText\"></a>\n### readAsText(file`:Object`, callback`:Function`)`:void`\nReading the contents of the specified `File` as `text`.\n\n* file — file object\n* callback — function, receives a result\n\n```js\nFileAPI.readAsText(file, function (evt/**Object*/){\n\tif( evt.type == 'load' ){\n\t\t// Success\n\t \tvar text = evt.result;\n\t} else if( evt.type =='progress' ){\n\t\tvar pr = evt.loaded/evt.total * 100;\n\t} else {\n\t\t// Error\n\t}\n})\n```\n\n---\n\n<a name=\"FileAPI.readAsText-encoding\"></a>\n### readAsText(file`:Object`, encoding`:String`, callback`:Function`)`:void`\nReading the contents of the specified `File` as `text`.\n\n* encoding — a string indicating the encoding to use for the returned data. By default, UTF-8.\n\n```js\nFileAPI.readAsText(file, \"utf-8\", function (evt/**Object*/){\n\tif( evt.type == 'load' ){\n\t\t// Success\n\t \tvar text = evt.result;\n\t} else if( evt.type =='progress' ){\n\t\tvar pr = evt.loaded/evt.total * 100;\n\t} else {\n\t\t// Error\n\t}\n})\n```\n\n---\n\n\n<a name=\"options\" data-name=\"Upload options\"></a>\n## Upload options\n\n<a name=\"options.url\"></a>\n### url`:String`\nA string containing the URL to which the request is sent.\n\n---\n\n<a name=\"options.data\"></a>\n### data`:Object`\nAdditional post data to be sent along with the file uploads.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tdata: { 'session-id': 123 },\n\tfiles: { ... },\n});\n```\n\n---\n\n<a name=\"options.headers\"></a>\n### headers`:Object`\nAdditional request headers, HTML5 only.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\theaders: { 'x-upload': 'fileapi' },\n\tfiles: { .. },\n});\n```\n\n---\n\n<a name=\"options.files\"></a>\n### files`:Object`\nKey-value object, `key` — post name, `value` — File or FileAPI.Image object.\n\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: {\n\t\taudio: files\n\t}\n});\n```\n\n---\n\n<a name=\"options.chunkSize\"></a>\n### chunkSize`:Number`\nChunk size in bytes, HTML5 only.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { images: fileList },\n\tchunkSize: 0.5 * FileAPI.MB\n});\n```\n\n---\n\n<a name=\"options.chunkUploadRetry\"></a>\n### chunkUploadRetry`:Number`\nNumber of retries during upload chunks, HTML5 only.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { images: fileList },\n\tchunkSize: 0.5 * FileAPI.MB,\n\tchunkUploadRetry: 3\n});\n```\n\n--\n\n<a name=\"options.imageTransform\"></a>\n### imageTransform`:Object`\nRules of changes the original image on the client.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { image: imageFiles },\n\t// Changes the original image\n\timageTransform: {\n\t\t// resize by max side\n\t\tmaxWidth: 800,\n\t\tmaxHeight: 600,\n\t\t// Add watermark\n\t\toverlay: [{ x: 10, y: 10, src: '/i/watemark.png', rel: FileAPI.Image.RIGHT_BOTTOM }]\n\t}\n});\n```\n\n--\n\n<a name=\"options.imageTransform-multi\"></a>\n### imageTransform`:Object`\nRules of image transformation on the client, for more images.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { image: imageFiles },\n\timageTransform: {\n\t\t// resize by max side\n\t\t'huge': { maxWidth: 800, maxHeight: 600 },\n\t\t// crop & resize\n\t\t'medium': { width: 320, height: 240, preview: true },\n\t\t// crop & resize + watemark\n\t\t'small': {\n\t\t\twidth: 100, height: 100,\n\t\t\t// Add watermark\n\t\t\toverlay: [{ x: 5, y: 5, src: '/i/watemark.png', rel: FileAPI.Image.RIGHT_BOTTOM }]\n\t\t}\n\t}\n});\n```\n\n--\n\n<a name=\"options.imageTransform-jpeg\"></a>\n### imageTransform`:Object`\nConvert all images to jpeg or png.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { image: imageFiles },\n\timageTransform: {\n\t\ttype: 'image/jpeg',\n\t\tquality: 0.86 // jpeg quality\n\t}\n});\n```\n\n\n<a name=\"options.imageOriginal\"></a>\n### imageOriginal`:Boolean`\nSent to the server the original image or not, if defined imageTransform option.\n\n--\n\n<a name=\"options.imageAutoOrientation\"></a>\n### imageAutoOrientation`:Boolean`\nAuto-rotate images on the basis of EXIF.\n\n--\n\n<a name=\"options.prepare\"></a>\n### prepare`:Function`\nPrepare options upload for a particular file.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { .. }\n\tprepare: function (file/**Object*/, options/**Object*/){\n\t\toptions.data.secret = utils.getSecretKey(file.name);\n\t}\n});\n```\n\n--\n\n<a name=\"options.upload\"></a>\n### upload`:Function`\nStart uploading.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { .. }\n\tupload: function (xhr/**Object*/, options/**Object*/){\n\t\t// ...\n\t}\n});\n```\n\n--\n\n<a name=\"options.fileupload\"></a>\n### fileupload`:Function`\nStart file uploading.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { .. }\n\tuploadfile: function (file/**Object*/, xhr/**Object*/, options/**Object*/){\n\t\t// ...\n\t}\n});\n```\n\n--\n\n<a name=\"options.progress\"></a>\n### progress`:Function`\nCallback for upload progress events.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { .. }\n\tprogress: function (evt/**Object*/, file/**Object*/, xhr/**Object*/, options/**Object*/){\n\t\tvar pr = evt.loaded/evt.total * 100;\n\t}\n});\n```\n\n--\n\n<a name=\"options.fileprogress\"></a>\n### fileprogress`:Function`\nCallback for upload file progress events.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { .. }\n\tfileprogress: function (evt/**Object*/, file/**Object*/, xhr/**Object*/, options/**Object*/){\n\t\tvar pr = evt.loaded/evt.total * 100;\n\t}\n});\n```\n\n--\n\n<a name=\"options.complete\"></a>\n### complete`:Function`\nCallback for end upload requests.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { .. }\n\tcomplete: function (err/**String*/, xhr/**Object*/, file/**Object/, options/**Object*/){\n\t\tif( !err ){\n\t\t\t// All files successfully uploaded.\n\t\t}\n\t}\n});\n```\n\n--\n\n<a name=\"options.filecomplete\"></a>\n### filecomplete`:Function`\nCallback for end upload requests.\n\n```js\nvar xhr = FileAPI.upload({\n\turl: '...',\n\tfiles: { .. }\n\tfilecomplete: function (err/**String*/, xhr/**Object*/, file/**Object/, options/**Object*/){\n\t\tif( !err ){\n\t\t\t// File successfully uploaded\n\t\t\tvar result = xhr.responseText;\n\t\t}\n\t}\n});\n```\n\n---\n\n<a name=\"File\"></a>\n## File object\n\n<a name=\"File.name\"></a>\n### name\nThe name of the file referenced by the File object.\n\n<a name=\"File.type\"></a>\n### type\nThe type (MIME type) of the file referenced by the File object.\n\n<a name=\"File.size\"></a>\n### size\nThe size (in bytes) of the file referenced by the File object.\n\n\n---\n\n\n<a name=\"FileAPI.event\"></a>\n## FileAPI.event\n\n<a name=\"FileAPI.event.on\"></a>\n### on(el`:HTMLElement`, events`:String`, handler`:Function`)`:void`\nAttach an event handler function.\n\n* el — DOM element\n* events — one or more space-separated event types.\n* handler — A function to execute when the event is triggered.\n\n---\n\n<a name=\"FileAPI.event.off\"></a>\n### off(el`:HTMLElement`, events`:String`, handler`:Function`)`:void`\nRemove an event handler.\n\n* el — DOM element\n* events — one or more space-separated event types.\n* handler — a handler function previously attached for the event(s).\n\n---\n\n<a name=\"FileAPI.event.one\"></a>\n### one(el`:HTMLElement`, events`:String`, handler`:Function`)`:void`\nAttach an event handler function. The handler is executed at most once.\n\n* el — DOM element\n* events — one or more space-separated event types.\n* handler — a function to execute when the event is triggered.\n\n---\n\n<a name=\"FileAPI.event.dnd\"></a>\n### dnd(el`:HTMLElement`, hover`:Function`, handler`:Function`)`:void`\nAttach an drag and drop event handler function.\n\n* el — drop zone\n* hover — `dragenter` and `dragleave` listener\n* handler — `drop` event handler.\n\n```js\nvar el = document.getElementById('dropzone');\nFileAPI.event.dnd(el, function (over){\n\tel.style.backgroundColor = over ? '#f60': '';\n}, function (files){\n\tif( files.length ){\n\t\t// Upload their.\n\t}\n});\n\n// or jQuery\n$('#dropzone').dnd(hoverFn, dropFn);\n```\n\n---\n\n<a name=\"FileAPI.event.dnd.off\"></a>\n### dnd.off(el`:HTMLElement`, hover`:Function`, handler`:Function`)`:void`\nRemove an drag and drop event handler function.\n\n* el — drop zone\n* hover — `dragenter` and `dragleave` listener\n* handler — `drop` event handler.\n\n```js\n// Native\nFileAPI.event.dnd.off(el, hoverFn, dropFn);\n\n// jQuery\n$('#dropzone').dndoff(hoverFn, dropFn);\n```\n\n--\n\n<a name=\"FileAPI.Image\"></a>\n## FileAPI.Image\nClass for working with images\n\n### constructor(file`:Object`)`:void`\nThe constructor takes a single argument, the `File` object.\n\n* file — the `File` object\n\n```js\nFileAPI.Image(imageFile).get(function (err/**String*/, img/**HTMLElement*/){\n\tif( !err ){\n\t\tdocument.body.appendChild( img );\n\t}\n});\n```\n\n---\n\n<a name=\"FileAPI.Image.crop\"></a>\n### crop(width`:Number`, height`:Number`)`:FileAPI.Image`\nCrop image by width and height.\n\n* width — new image width\n* height — new image height\n\n```js\nFileAPI.Image(imageFile)\n\t.crop(640, 480)\n\t.get(function (err/**String*/, img/**HTMLElement*/){\n\n\t})\n;\n```\n\n### crop(x`:Number`, y`:Number`, width`:Number`, height`:Number`)`:FileAPI.Image`\nCrop image by x, y, width and height.\n\n* x — offset from the top corner\n* y — offset from the left corner\n\n```js\nFileAPI.Image(imageFile)\n\t.crop(100, 50, 320, 240)\n\t.get(function (err/**String*/, img/**HTMLElement*/){\n\n\t})\n;\n```\n\n---\n\n<a name=\"FileAPI.Image.resize\"></a>\n### resize(width`:Number`, height`:Number`[, type`:String`])`:FileAPI.Image`\nResize image.\n\n* width — new image width\n* height — new image height\n* type — enum: `min`, `max`, `preview`. By default `undefined`.\n\n```js\nFileAPI.Image(imageFile)\n\t.resize(320, 240)\n\t.get(function (err/**String*/, img/**HTMLElement*/){\n\n\t})\n;\n\n// Resize image on by max side.\nFileAPI.Image(imageFile)\n\t.resize(320, 240, 'max')\n\t.get(function (err/**String*/, img/**HTMLElement*/){\n\n\t})\n;\n```\n\n---\n\n<a name=\"FileAPI.Image.preview\"></a>\n### preview(width`:Number`[, height`:Number`])`:FileAPI.Image`\nCrop and resize image.\n\n* width — new image width\n* height — new image height\n\n```js\nFileAPI.Image(imageFile)\n\t.preview(100, 100)\n\t.get(function (err/**String*/, img/**HTMLElement*/){\n\n\t})\n;\n```\n\n---\n\n<a name=\"FileAPI.Image.rotate\"></a>\n### rotate(deg`:Number`)`:FileAPI.Image`\nRotate image.\n\n* deg — rotation angle in degrees\n\n```js\nFileAPI.Image(imageFile)\n\t.rotate(90)\n\t.get(function (err/**String*/, img/**HTMLElement*/){\n\n\t})\n;\n```\n\n---\n\n<a name=\"FileAPI.Image.filter\"></a>\n### filter(callback`:Function`)`:FileAPI.Image`\nApply filter function. Only `HTML5`.\n\n* callback — takes two arguments, `canvas` element and `done` method.\n\n```js\nFileAPI.Image(imageFile)\n\t.filter(function (canvas/**HTMLCanvasElement*/, doneFn/**Function*/){\n\t\t// bla-bla-lba\n\t\tdoneFn();\n\t})\n\t.get(function (err/**String*/, img/**HTMLElement*/){\n\n\t})\n;\n```\n\n\n---\n\n### filter(name`:String`)`:FileAPI.Image`\nUses [CamanJS](http://camanjs.com/), include it before FileAPI library.\n\n* name — CamanJS filter name (custom or preset)\n\n```js\nCaman.Filter.register(\"my-funky-filter\", function () {\n\t// http://camanjs.com/guides/#Extending\n});\n\nFileAPI.Image(imageFile)\n\t.filter(\"my-funky-filter\") // or .filter(\"vintage\")\n\t.get(function (err/**String*/, img/**HTMLElement*/){\n\n\t})\n;\n```\n\n---\n\n<a name=\"FileAPI.Image.overlay\"></a>\n### overlay(images`:Array`)`:FileAPI.Image`\nAdd overlay images, eg: watermark.\n\n* images — array of overlays\n\n```js\nFileAPI.Image(imageFile)\n\t.overlay([\n\t\t// Left corner.\n\t\t{ x: 10, y: 10, w: 100, h: 10, src: '/i/watermark.png' },\n\n\t\t// Right bottom corner.\n\t\t{ x: 10, y: 10, src: '/i/watermark.png', rel: FileAPI.Image.RIGHT_BOTTOM }\n\t])\n\t.get(function (err/**String*/, img/**HTMLElement*/){\n\n\t})\n;\n```\n\n---\n\n<a name=\"FileAPI.Image.get\"></a>\n### get(fn`:Function`)`:FileAPI.Image`\nGet the final image.\n\n* fn — complete callback\n\n---\n\n<a name=\"FileAPI.Camera\"></a>\n## FileAPI.Camera\nTo work with a webcam, be sure to set `FileAPI.media: true`.\n\n\n<a name=\"FileAPI.Camera.publish\"></a>\n### publish(el`:HTMLElement`, options`:Object`, callback`:Function`)`:void`\nPublication of the camera.\n\n* el — target\n* options — { `width: 100%`, `height: 100%`, `start: true` }\n* callback — the first parameter is a possible error, the second instance of FileAPI.Camera\n\n```js\nvar el = document.getElementById('cam');\nFileAPI.Camera.publish(el, { width: 320, height: 240 }, function (err, cam/**FileAPI.Camera*/){\n\tif( !err ){\n\t\t// The webcam is ready, you can use it.\n\t}\n});\n```\n\n---\n\n<a name=\"FileAPI.Camera.start\"></a>\n### start(callback`:Function`)`:void`\nTurn on the camera.\n\n* callback — will be called when the camera ready\n\n```js\nvar el = document.getElementById('cam');\nFileAPI.Camera.publish(el, { start: false }, function (err, cam/**FileAPI.Camera*/){\n\tif( !err ){\n\t\t// Turn on\n\t\tcam.start(function (err){\n\t\t\tif( !err ){\n\t\t\t\t// The camera is ready for use.\n\t\t\t}\n\t\t});\n\t}\n});\n```\n\n---\n\n<a name=\"FileAPI.Camera.stop\"></a>\n### stop()`:void`\nTurn off the camera.\n\n---\n\n<a name=\"FileAPI.Camera.shot\"></a>\n### shot()`:FileAPI.Image`\nTake a picture with the camera.\n\n```js\nvar el = document.getElementById('cam');\nFileAPI.Camera.publish(el, function (err, cam/**FileAPI.Camera*/){\n\tif( !err ){\n\t\tvar shot = cam.shot(); // take a picture\n\n\t\t// create thumbnail 100x100\n\t\tshot.preview(100).get(function (err, img){\n\t\t\tpreviews.appendChild(img);\n\t\t});\n\n\t\t// and/or\n\t\tFileAPI.upload({\n\t\t\turl: '...',\n\t\t\tfiles: { cam: shot\n\t\t});\n\t}\n});\n```\n\n---\n\n<a name=\"const\" data-name=\"Сonst\"></a>\n## Сonstants\n\n<a name=\"FileAPI.KB\"></a>\n### FileAPI.KB`:Number`\n1024 bytes\n\n<a name=\"FileAPI.MB\"></a>\n### FileAPI.MB`:Number`\n1048576 bytes\n\n<a name=\"FileAPI.GB\"></a>\n### FileAPI.GB`:Number`\n1073741824 bytes\n\n<a name=\"FileAPI.TB\"></a>\n### FileAPI.TB`:Number`\n1.0995116e+12 bytes\n\n---\n\n<a name=\"FileAPI.utils\"></a>\n## Utils\n\n<a name=\"FileAPI.each\"></a>\n### FileAPI.each(obj`:Object|Array`, callback`:Function`[, thisObject`:Mixed`])`:void`\nIterate over a object or array, executing a function for each matched element.\n\n* obj — array or object\n* callback — a function to execute for each element.\n* thisObject — object to use as `this` when executing `callback`.\n\n--\n\n<a name=\"FileAPI.extend\"></a>\n### FileAPI.extend(dst`:Object`, src`:Object`)`:Object`\nMerge the contents of two objects together into the first object.\n\n* dst — an object that will receive the new properties\n* src — an object containing additional properties to merge in.\n\n--\n\n<a name=\"FileAPI.filter\"></a>\n### FileAPI.filter(array`:Array`, callback`:Function`[, thisObject`:Mixed`)`:Object`\nCreates a new array with all elements that pass the test implemented by the provided function.\n\n* array — original Array\n* callback — Function to test each element of the array.\n* thisObject — object to use as `this` when executing `callback`.\n\n---\n\n<a name=\"support\"><a/>\n## Support\n<ul>\n\t<li>Multiupload: all browsers that support HTML5 or Flash</li>\n\t<li>Drag'n'Drop upload: files (HTML5) & directories (Chrome 21+)</li>\n\t<li>Chunked file upload (HTML5)</li>\n\t<li>Upload one file: all browsers</li>\n\t<li>\n\t\tWorking with Images: IE6+, FF 3.6+, Chrome 10+, Opera 11.1+, Safari 5.4+\n\t\t<ul>\n\t\t\t<li>crop, resize, preview & rotate (HTML5 or Flash)</li>\n\t\t\t<li>auto orientation by exif (HTML5, if include FileAPI.exif.js or Flash)</li>\n\t\t</ul>\n\t</li>\n</ul>\n\n<a name=\"FileAPI.support.html5\"></a>\n### FileAPI.support.html5`:Boolean`\nHTML5 borwser support\n\n<a name=\"FileAPI.support.cors\"></a>\n### FileAPI.support.cors`:Boolean`\nThis cross-origin resource sharing is used to enable cross-site HTTP requests.\n\n<a name=\"FileAPI.support.dnd\"></a>\n### FileAPI.support.dnd`:Boolean`\nDrag'n'drop events support.\n\n<a name=\"FileAPI.support.flash\"></a>\n### FileAPI.support.flash`:Boolean`\nAvailability Flash plugin.\n\n<a name=\"FileAPI.support.canvas\"></a>\n### FileAPI.support.canvas`:Boolean`\nCanvas support.\n\n<a name=\"FileAPI.support.dataURI\"></a>\n### FileAPI.support.dataURI`:Boolean`\nSupport dataURI as src for image.\n\n<a name=\"FileAPI.support.chunked\"></a>\n### FileAPI.support.chunked`:Boolean`\nSupport chuncked upload.\n\n---\n\n<a name=\"flash\"></a>\n## Flash\nFlash is very \"buggy\" thing :]\nThe server response can not be empty.\nTherefore, in the event of a successful uploading `http status` should be only `200 OK`.\n\n<a name=\"flash.settings\"></a>\n### Settings\nFlash settings.\nIt is advisable to place flash on the same server where the files will be uploaded.\n\n```html\n<script>\n\tvar FileAPI = {\n\t \t// @default: \"./dist/\"\n\t\tstaticPath: '/js/',\n\n\t\t // @default: FileAPI.staticPath + \"FileAPI.flash.swf\"\n\t\tflashUrl: '/statics/FileAPI.flash.swf',\n\n\t\t// @default: FileAPI.staticPath + \"FileAPI.flash.image.swf\"\n\t\tflashImageUrl: '/statics/FileAPI.flash.image.swf'\n\t};\n</script>\n<script src=\"/js/FileAPI.min.js\"></script>\n```\n\n---\n\n<a name=\"crossdomain.xml\"></a>\n### crossdomain.xml\nNecessarily make this file on the server.\nDo not forget to replace `youdomain.com` on the name of your domain.\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE cross-domain-policy SYSTEM \"http://www.adobe.com/xml/dtds/cross-domain-policy.dtd\">\n<cross-domain-policy>\n\t<site-control permitted-cross-domain-policies=\"all\"/>\n\t<allow-access-from domain=\"youdomain.com\" secure=\"false\"/>\n\t<allow-access-from domain=\"*.youdomain.com\" secure=\"false\"/>\n\t<allow-http-request-headers-from domain=\"*\" headers=\"*\" secure=\"false\"/>\n</cross-domain-policy>\n```\n\n---\n\n<a name=\"flash.request\"></a>\n### request\nThe following sample HTTP POST request is sent from Flash Player to a server-side script if no parameters are specified:\n\n```xml\nPOST /server/ctrl.php HTTP/1.1\nAccept: text/*\nContent-Type: multipart/form-data;\nboundary=----------Ij5ae0ae0KM7GI3KM7\nUser-Agent: Shockwave Flash\nHost: www.youdomain.com\nContent-Length: 421\nConnection: Keep-Alive\nCache-Control: no-cache\n\n------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7\nContent-Disposition: form-data; name=\"Filename\"\n\nMyFile.jpg\n------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7\nContent-Disposition: form-data; name=\"Filedata\"; filename=\"MyFile.jpg\"\nContent-Type: application/octet-stream\n\n[[..FILE_DATA_HERE..]]\n------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7\nContent-Disposition: form-data; name=\"Upload\"\n\nSubmit Query\n------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7--\n```\n\n---\n\n<a name=\"server\"></a>\n## Server settings\n\n<a name=\"server.iframe\"></a>\n### IFrame/JSONP\n\n```php\n<script>\n(function (ctx, jsonp){\n\t'use strict';\n\tif( ctx && ctx[jsonp] ){\n\t\tctx[jsonp](200/*http.status*/, 'OK' /*http.statusText*/, \"response body\");\n\t}\n})(window, '{{$request_param_callback}}');\n</script>\n\n<!-- or -->\n\n<?php\n\tinclude './FileAPI.class.php';\n\n\tif( strtoupper($_SERVER['REQUEST_METHOD']) == 'POST' ){\n\t\t// Retrieve File List\n\t\t$files\t= FileAPI::getFiles();\n\n\t\t// ... your logic\n\n\t\t// JSONP callback name\n\t\t$jsonp\t= isset($_REQUEST['callback']) ? trim($_REQUEST['callback']) : null;\n\n\t\t// Server response: \"HTTP/1.1 200 OK\"\n\t\tFileAPI::makeResponse(array(\n\t\t\t  'status' => FileAPI::OK\n\t\t\t, 'statusText' => 'OK'\n\t\t\t, 'body' => array('count' => sizeof($files)\n\t\t), $jsonp);\n\t\texit;\n\t}\n?>\n```\n\n---\n\n<a name=\"server.CORS\"></a>\n### CORS\nEnable CORS.\n\n```php\n<?php\n\t// Permitted types of request\n    header('Access-Control-Allow-Methods: POST, OPTIONS');\n\n    // Describe custom headers\n    header('Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Range, Content-Disposition, Content-Type');\n\n    // A comma-separated list of domains\n    header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);\n\n\t// Allow cookie\n\theader('Access-Control-Allow-Credentials: true');\n\n    if( $_SERVER['REQUEST_METHOD'] == 'OPTIONS' ){\n        exit;\n    }\n\n    if( $_SERVER['REQUEST_METHOD'] == 'POST' ){\n        // ...\n    }\n?>\n```\n\n---\n\n<a name=\"server.chunked\"></a>\n### Chunked file upload\nClient and server communicate to each other using the following HTTP headers and status codes.<br/>\nClient explicitly sets the following headers:<br/>\n<ul>\n\t<li>Content-Range: bytes &lt;start-offset&gt;-&lt;end-offset&gt;/&lt;total&gt;</li>\n\t<li>Content-Disposition: attachment; filename=&lt;file-name&gt;</li>\n</ul>\nAny other headers are set by a target browser and are not used by client. Library does not provide any facilities to track a file uniqueness across requests, it's left on developer's consideration.<br/>\nResponse codes:\n<ul>\n\t<li>200 - last chunk is uploaded</li>\n\t<li>201 - chunk is successfully saved</li>\n\t<li>416 - range is not acceptable error, recoverable</li>\n\t<li>500 - server error, recoverable</li>\n</ul>\nFor recoverable errors server tries to resend chunk `chunkUploadRetry` times then fails.<br/\nResponse headers:\n<ul>\n\t<li>X-Last-Known-Byte: int, library tries to resend chunk from the given offset. Applicable to response codes 200 and 416</li>\n</ul>\nAll the other codes - fatal error, user's involvement is recommend.\n\n---\n\n\n<a name=\"buttons.examples\"></a>\n## Buttons examples\n\n<a name=\"buttons.examples.base\"></a>\n### Base\nSimple input[type=\"file\"]\n\n```html\n<span class=\"js-fileapi-wrapper\" style=\"position: relative; display: inline-block;\">\n    <input name=\"files\" type=\"file\" multiple/>\n</span>\n```\n\n---\n\n<a name=\"buttons.examples.button\"></a>\n### Button\nStylized button.\n\n```html\n<style>\n.upload-btn {\n    width: 130px;\n    height: 25px;\n    overflow: hidden;\n    position: relative;\n    border: 3px solid #06c;\n    border-radius: 5px;\n    background: #0cf;\n\n}\n    .upload-btn:hover {\n        background: #09f;\n    }\n    .upload-btn__txt {\n        z-index: 1;\n        position: relative;\n        color: #fff;\n        font-size: 18px;\n        font-family: \"Helvetica Neue\";\n        line-height: 24px;\n        text-align: center;\n        text-shadow: 0 1px 1px #000;\n    }\n    .upload-btn input {\n        top: -10px;\n        right: -40px;\n        z-index: 2;\n        position: absolute;\n        cursor: pointer;\n        opacity: 0;\n        filter: alpha(opacity=0);\n        font-size: 50px;\n    }\n</style>\n<div class=\"js-fileapi-wrapper upload-btn\">\n    <div class=\"upload-btn__txt\">Upload files</div>\n    <input name=\"files\" type=\"file\" multiple />\n</div>\n```\n\n\n---\n\n\n<a name=\"buttons.examples.link\"></a>\n### Link\nButton like link.\n\n```html\n<style>\n.upload-link {\n    color: #36c;\n    display: inline-block;\n    *zoom: 1;\n    *display: inline;\n    overflow: hidden;\n    position: relative;\n    padding-bottom: 2px;\n    text-decoration: none;\n}\n    .upload-link__txt {\n        z-index: 1;\n        position: relative;\n        border-bottom: 1px dotted #36c;\n    }\n        .upload-link:hover .upload-link__txt {\n            color: #f00;\n            border-bottom-color: #f00;\n        }\n\n    .upload-link input {\n        top: -10px;\n        right: -40px;\n        z-index: 2;\n        position: absolute;\n        cursor: pointer;\n        opacity: 0;\n        filter: alpha(opacity=0);\n        font-size: 50px;\n    }\n</style>\n<a class=\"js-fileapi-wrapper upload-link\">\n    <span class=\"upload-link__txt\">Upload photo</span>\n    <input name=\"photo\" type=\"file\" accept=\"image/*\" />\n</a>\n```\n\n---\n\n<a name=\"install\" data-name=\"Installation\"></a>\n## Installation, testing, assembling\n`npm install fileapi`<br/>\n`cd fileapi`<br/>\n`npm install`<br/>\n`grunt`\n\n\n---\n\n\n<a name=\"Changelog\"></a>\n## Changelog\n\n### 2.0.0\n<ul>\n\t<li>+ FileAPI.Camera (HTML5 and Flash fallback)</li>\n\t<li>+ jquery.fileapi.js, see <a href=\"http://rubaxa.github.io/jquery.fileapi/\">demo</a></li>\n\t<li>+ npm support</li>\n\t<li>+ grunt support</li>\n\t<li>+ requirejs support</li>\n\t<li>+ [#80](https://https://github.com/mailru/FileAPI/issues/80): FileAPI.Image.fn.overlay</li>\n \t<li>`imageTransform` — now supports: `crop`, `type`, `quality` and `overlay` properties.</li>\n\t<li>Improved the documentation</li>\n\t<li>+iOS fix (https://github.com/blueimp/JavaScript-Load-Image)</li>\n\t<li>[#121](https://github.com/mailru/FileAPI/issues/121): + FileAPI.`postNameConcat:Function(name, idx)`</li>\n\t<li>[#116](https://github.com/mailru/FileAPI/issues/116): + `cache:false` option for FileAPI.upload</li>\n</ul>\n\n\n### 1.2.6\n<ul>\n\t<li>[#91](https://github.com/mailru/FileAPI/issues/91): replace `new Image` to `FileAPI.newImage`</li>\n\t<li>+ FileAPI.withCredentials: true</li>\n\t<li>[#90](https://github.com/mailru/FileAPI/issues/90): Fixed `progress` event</li>\n\t<li>[#105](https://github.com/mailru/FileAPI/issues/105): Fixed `image/jpg` -> `image/jpeg`</li>\n\t<li>[#108](https://github.com/mailru/FileAPI/issues/108): Check width/height before resize by type(min/max)</li>\n</ul>\n\n\n### 1.2.5\n<ul>\n\t<li>[#86](https://github.com/mailru/FileAPI/issues/86): Smarter upload recovery</li>\n\t<li>[#87](https://github.com/mailru/FileAPI/issues/87): Fixed upload files into browsers that do not support FormData</li>\n\t<li>Fixed support \"accept\" attribute for Flash.</li>\n\t<li>Fixed detection of HTML5 support for FireFox 3.6</li>\n\t<li> + FileAPI.html5 option, default \"true\"</li>\n</ul>\n\n\n### 1.2.4\n<ul>\n\t<li>Fixed auto orientation image by EXIF (Flash)</li>\n\t<li>Fixed image dimensions after rotate (Flash)</li>\n\t<li>[#82](https://github.com/mailru/FileAPI/issues/82): \"undefined\" data-fields cause exceptions</li>\n\t<li>[#83](https://github.com/mailru/FileAPI/issues/83): Allow requests without files</li>\n\t<li>[#84](https://github.com/mailru/FileAPI/pull/84): Fixed connection abort when waiting for connection recovery</li>\n</ul>\n\n\n### 1.2.3\n<ul>\n\t<li>[#77](https://github.com/mailru/FileAPI/pull/77): Fixed flash.abort(), [#75](https://github.com/mailru/FileAPI/issues/75)</li>\n\t<li>- `FileAPI.addMime`</li>\n\t<li>+ `FileAPI.accept` — fallback for flash.</li>\n</ul>\n\n\n### 1.2.2\n<ul>\n\t<li>[#67](https://github.com/mailru/FileAPI/pull/67): Added correct httpStatus for upload fail, [#62](https://github.com/mailru/FileAPI/pull/68)</li>\n\t<li>[#68](https://github.com/mailru/FileAPI/pull/68) Added \"Content-Type\" for chunked upload, [#65](https://github.com/mailru/FileAPI/pull/65)</li>\n\t<li>[#69](https://github.com/mailru/FileAPI/issues/69): Fixed network down recovery</li>\n\t<li>Fixed progress event, [#66](https://github.com/mailru/FileAPI/issues/66)</li>\n\t<li>Increase flash stage size, [#73](https://github.com/mailru/FileAPI/pull/73)</li>\n\t<li>- array index from POST-param \"name\", [#72](https://github.com/mailru/FileAPI/issues/72)</li>\n\t<li>- dependency on FileAPI.Image for FileAPI.Flash</li>\n</ul>\n\n\n### 1.2.1\n<ul>\n\t<li>[#64](https://github.com/mailru/FileAPI/issues/64): Bufixed for [#63](https://github.com/mailru/FileAPI/issues/63)</li>\n</ul>\n\n\n### 1.2.0\n<ul>\n\t<li>[#57](https://github.com/mailru/FileAPI/issues/57): Chunked file upload</li>\n</ul>\n\n\n### 1.1.0\n<ul>\n\t<li>[#54](https://github.com/mailru/FileAPI/issues/54): added `FileAPI.flashUrl` and `FileAPI.flashImageUrl`</li>\n</ul>\n\n\n### 1.0.1\n<ul>\n\t<li>[#51](https://github.com/mailru/FileAPI/issues/51): remove circular references from `file-objects` (Flash transport)</li>\n\t<li>added `changelog`</li>\n</ul>\n\n\n### 1.0.0\n<ul>\n\t<li>first release</li>\n</ul>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mailru/FileAPI/issues"
  },
  "homepage": "https://github.com/mailru/FileAPI",
  "_id": "fileapi@2.0.2",
  "_shasum": "0508cafa7e619e2483530efa564c79ed68ba873d",
  "_from": "fileapi@",
  "_resolved": "https://registry.npmjs.org/fileapi/-/fileapi-2.0.2.tgz"
}
